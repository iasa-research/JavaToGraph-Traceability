// Abstract Factory Pattern
CREATE (abstractfactorypattern:Pattern {patternname:'Abstract Factory'})
MERGE (abstractfactory:Patterncomponent {componentname:'AbstractFactory'})
MERGE (concretefactory:Patterncomponent {componentname:'ConcreteFactory'})
MERGE (abstractfactoryclient:Patterncomponent {componentname:'AbstractFactoryClient'})
MERGE (abstractproduct:Patterncomponent {componentname:'AbstractProduct'})
MERGE (concreteproduct:Patterncomponent {componentname:'ConcreteProduct'})
CREATE (abstractfactorypattern)-[:HASCOMPONENT]->(abstractfactory)
CREATE (abstractfactorypattern)-[:HASCOMPONENT]->(abstractfactoryclient)
CREATE (abstractfactorypattern)-[:HASCOMPONENT]->(abstractproduct)
CREATE (abstractfactorypattern)-[:HASCOMPONENT]->(concretefactory)
CREATE (abstractfactorypattern)-[:HASCOMPONENT]->(concreteproduct)
CREATE (abstractfactoryclient)-[:USES]->(abstractfactory)
CREATE (abstractfactoryclient)-[:USES]->(abstractproduct)
CREATE (concretefactory)-[:EXTENDS]->(abstractfactory)
CREATE (concreteproduct)-[:EXTENDS]->(abstractproduct)
CREATE (concretefactory)-[:`CREATES`]->(concreteproduct)

// MVC Pattern
CREATE (mvc:Pattern {patternname:'Model View Controller'})
MERGE (model:Patterncomponent {componentname:'Model'})
MERGE (view:Patterncomponent {componentname:'View'})
MERGE (controller:Patterncomponent {componentname:'Controller'})
CREATE (mvc)-[:HASCOMPONENT]->(view)
CREATE (mvc)-[:HASCOMPONENT]->(model)
CREATE (mvc)-[:HASCOMPONENT]->(controller)
CREATE (controller)-[:USES]->(view)
CREATE (controller)-[:USES]->(model)
CREATE (view)-[:USES]->(model)
CREATE (view)-[:USES]->(controller)

// Command Pattern
CREATE (command:Pattern {patternname:'Command'})
MERGE (commandcaller:Patterncomponent {componentname:'CommandCaller'})
MERGE (commandclient:Patterncomponent {componentname:'CommandClient'})
MERGE (abstractcommand:Patterncomponent {componentname:'AbstractCommand'})
MERGE (concretecommand:Patterncomponent {componentname:'ConcreteCommand'})
MERGE (commandreceiver:Patterncomponent {componentname:'CommandReceiver'})
CREATE (command)-[:HASCOMPONENT]->(commandclient)
CREATE (command)-[:HASCOMPONENT]->(commandcaller)
CREATE (command)-[:HASCOMPONENT]->(abstractcommand)
CREATE (command)-[:HASCOMPONENT]->(concretecommand)
CREATE (command)-[:HASCOMPONENT]->(commandreceiver)
CREATE (concretecommand)-[:EXTENDS]->(abstractcommand)
CREATE (commandclient)-[:USES]->(concretecommand)
CREATE (concretecommand)-[:USES]->(commandreceiver)
CREATE (commandclient)-[:USES]->(commandreceiver)
CREATE (commandcaller)-[:USES]->(abstractcommand)
CREATE (commandcaller)-[:USES]->(abstractcommand)

// Strategy Pattern
CREATE (strategy:Pattern {patternname:'Strategy'})
MERGE (strategyclient:Patterncomponent {componentname:'StrategyClient'})
MERGE (abstractstrategy:Patterncomponent {componentname:'AbstractStrategy'})
MERGE (concretestrategy:Patterncomponent {componentname:'ConcreteStrategy'})
CREATE (strategy)-[:HASCOMPONENT]->(strategyclient)
CREATE (strategy)-[:HASCOMPONENT]->(concretestrategy)
CREATE (strategy)-[:HASCOMPONENT]->(abstractstrategy)
CREATE (concretestrategy)-[:EXTENDS]->(abstractstrategy)
CREATE (strategyclient)-[:USES]->(abstractstrategy)
CREATE (strategyclient)-[:USES]->(abstractstrategy)

// Proxy Pattern
CREATE (proxy:Pattern {patternname:'Proxy'})
MERGE (client:Patterncomponent {componentname:'Client'})
MERGE (proxy_class:Patterncomponent {componentname: 'Proxy Class'})
MERGE (realsubject:Patterncomponent {componentname: 'RealSubject'})
MERGE (subject:Patterncomponent {componentname:'Subject'})
CREATE (proxy)-[:HASCOMPONENT]->(client)
CREATE (proxy)-[:HASCOMPONENT]->(proxy_class)
CREATE (proxy)-[:HASCOMPONENT]->(realsubject)
CREATE (proxy)-[:HASCOMPONENT]->(subject)
CREATE (realsubject)-[:IMPLEMENTS]->(subject)
CREATE (proxy_class)-[:IMPLEMENTS]->(subject)
CREATE (client)-[:USES]->(proxy_class)
CREATE (client)-[:USES]->(subject)
CREATE (proxy_class)-[:USES]->(realsubject)

//Observer Pattern
CREATE (observer:Pattern {patternname:'Observer'})
MERGE (publisher:Patterncomponent {componentname:'Publisher'})
MERGE (concretepublisher:Patterncomponent {componentname:'ConcretePublisher'})
MERGE (subscriber:Patterncomponent {componentname:'Subscriber'})
MERGE (concretesubscriber:Patterncomponent {componentname:'ConcreteSubscriber'})
CREATE (observer)-[:HASCOMPONENT]->(publisher)
CREATE (observer)-[:HASCOMPONENT]->(concretepublisher)
CREATE (observer)-[:HASCOMPONENT]->(subscriber)
CREATE (observer)-[:HASCOMPONENT]->(concretesubscriber)
CREATE (concretepublisher)-[:IMPLEMENTS]->(publisher)
CREATE (concretesubscriber)-[:IMPLEMENTS]->(subscriber)
CREATE (publisher)-[:USES]->(subscriber)
CREATE (concretesubscriber)-[:USES]->(concretepublisher)

//Round Tripping Persistent Object
CREATE (roundtrippingpersistentobject:Pattern {patternname:'Round Tripping Persistent Object'})
MERGE (testclass:Patterncomponent {componentname:'TestClass'})
MERGE (dao:Patterncomponent {componentname:'DAO'})
MERGE (compareclass:Patterncomponent {componentname:'CompareClass'})
CREATE (roundtrippingpersistentobject)-[:HASCOMPONENT]->(testclass)
CREATE (roundtrippingpersistentobject)-[:HASCOMPONENT]->(dao)
CREATE (roundtrippingpersistentobject)-[:HASCOMPONENT]->(compareclass)
CREATE (testclass)-[:USES]->(dao)
CREATE (testclass)-[:USES]->(compareclass)

//Singleton Pattern
CREATE (singleton:Pattern {patternname:'Singleton'})
MERGE (singleton_class:Patterncomponent {componentname:'Singleton Class'})
MERGE (singleton_user:Patterncomponent {componentname:'Singleton User'})
CREATE (singleton)-[:HASCOMPONENT]->(singleton_class)
CREATE (singleton)-[:HASCOMPONENT]->(singleton_user)
CREATE (singleton_user)-[:USES]->(singleton_class)